name: Android Auto Release (Kotlin DSL)

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Calculate next version
      id: version
      run: |
        git fetch --tags
        if ! git describe --tags --abbrev=0 2>/dev/null; then
          echo "No existing tags found - starting with v1.0.0"
          NEW_VERSION="1.0.0"
        else
          LATEST_TAG=$(git describe --tags --abbrev=0)
          VERSION=${LATEST_TAG#v}
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        fi
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Update version in build.gradle.kts
      run: |
        sed -i "s/versionCode = [0-9]*/versionCode = $(date +%Y%m%d)/" app/build.gradle.kts
        sed -i "s/versionName = \".*\"/versionName = \"${{ steps.version.outputs.version }}\"/" app/build.gradle.kts

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Build with Gradle
      id: build
      run: |
        chmod +x gradlew
        ./gradlew assembleRelease
        # Verify APK exists
        APK_PATH=$(find app/build/outputs/apk -name '*.apk' | head -1)
        if [ -z "$APK_PATH" ]; then
          echo "::error::No APK file found"
          exit 1
        fi
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
        echo "APK found at: $APK_PATH"

    - name: Create and push Git tag
      env:
        REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://x-access-token:${REPO_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
        git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.version }}"
        git push origin "${{ steps.version.outputs.tag }}"

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: "Automated release"
        draft: false
        prerelease: false

    - name: Upload Release APK
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.build.outputs.apk_path }}
        asset_name: app-release-${{ steps.version.outputs.version }}.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Commit version updates
      run: |
        git add app/build.gradle.kts
        git commit -m "Update version to ${{ steps.version.outputs.version }} [skip ci]"
        git push
